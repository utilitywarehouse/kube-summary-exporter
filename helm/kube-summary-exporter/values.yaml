# Default values for kube-summary-exporter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: quay.io/utilitywarehouse/kube-summary-exporter
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 9779
  targetPort: 9779
  name: kube-summary-exporter

# Configuration for the kube-summary-exporter
config:
  # The address to listen on for HTTP requests
  listenAddress: ":9779"
  # Path to a kubeconfig file (leave empty to use in-cluster config)
  kubeconfig: ""

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# RBAC configuration
rbac:
  # Specifies whether RBAC resources should be created
  create: true
  
  # Rules for the ClusterRole
  rules:
    - apiGroups: [""]
      resources: ["nodes"]
      verbs: ["get", "list"]
    - apiGroups: [""]
      resources: ["nodes/proxy"]
      verbs: ["get"]

# ServiceMonitor configuration for Prometheus Operator
serviceMonitor:
  # Specifies whether a ServiceMonitor should be created
  enabled: true
  
  # TROUBLESHOOTING: If Prometheus isn't picking up your ServiceMonitor, check:
  # 1. Your Prometheus serviceMonitorSelector labels (kubectl get prometheus -o yaml)
  # 2. Ensure the 'release' label matches your Prometheus release name
  # 3. Verify namespace permissions and RBAC
  
  # Namespace for the ServiceMonitor (defaults to release namespace)
  namespace: ""
  
  # Additional labels for the ServiceMonitor
  additionalLabels:
    release: kube-prom-stack
  
  # Annotations for the ServiceMonitor
  annotations: {}
  
  # Job label for the ServiceMonitor
  jobLabel: "app.kubernetes.io/name"
  
  # Scraping interval
  interval: 30s
  
  # Scrape timeout
  scrapeTimeout: 10s
  
  # Metrics path (defaults to /metrics)
  path: /metrics
  
  # Honor labels from the service
  honorLabels: false
  
  # Additional selector labels
  selector: {}
  
  # Target labels to add to scraped metrics
  targetLabels: []
  
  # Pod target labels to add to scraped metrics
  podTargetLabels: []
  
  # Namespace selector for the ServiceMonitor
  namespaceSelector: {}
  
  # Metric relabelings
  metricRelabelings: []
    # - sourceLabels: [__name__]
    #   regex: 'kube_summary_.*'
    #   action: keep
  
  # Relabelings
  relabelings: []
    # - sourceLabels: [__meta_kubernetes_service_name]
    #   targetLabel: service

# ServiceMonitor configuration for scraping /nodes endpoint (actual kube-summary data)
serviceMonitorNodes:
  # Specifies whether a ServiceMonitor should be created for /nodes endpoint
  enabled: true
  
  # Namespace for the ServiceMonitor (defaults to release namespace)
  namespace: ""
  
  # Additional labels for the ServiceMonitor
  additionalLabels:
    release: kube-prom-stack
  
  # Annotations for the ServiceMonitor
  annotations: {}
  
  # Job label for the ServiceMonitor
  jobLabel: "app.kubernetes.io/name"
  
  # Scraping interval
  interval: 30s
  
  # Scrape timeout
  scrapeTimeout: 10s
  
  # Honor labels from the service
  honorLabels: true
  
  # Additional selector labels
  selector: {}
  
  # Target labels to add to scraped metrics
  targetLabels: []
  
  # Pod target labels to add to scraped metrics
  podTargetLabels: []
  
  # Namespace selector for the ServiceMonitor
  namespaceSelector: {}
  
  # Metric relabelings
  metricRelabelings: []
    # - sourceLabels: [__name__]
    #   regex: 'kube_summary_.*'
    #   action: keep
  
  # Relabelings
  relabelings: []
    # - sourceLabels: [__meta_kubernetes_service_name]
    #   targetLabel: service